{"version":3,"file":"listenjs.js","sources":["../src/events.ts","../src/types.ts","../src/destroy-dom.ts","../src/dispatcher.ts","../src/set-prop.ts","../src/mount-dom.ts","../src/vnode-equal.ts","../src/utils/arrays.ts","../src/utils/objects.ts","../src/utils/strings.ts","../src/patch-dom.ts","../src/create-app.ts","../src/create-element.ts"],"sourcesContent":["import { Fiber } from \"./fiber\";\n\nfunction attachEventListener(\n  eventType: string,\n  handler: EventListener,\n  domElement: HTMLElement,\n  parentFiber: Fiber | null = null\n) {\n  function boundHandler(event: Event) {\n    if (parentFiber) {\n      handler.apply(parentFiber);\n    } else {\n      handler(event);\n    }\n  }\n\n  domElement.addEventListener(eventType, boundHandler);\n\n  return boundHandler;\n}\n\nfunction attachEventListeners(\n  listeners: Record<string, EventListener> = {},\n  domElement: HTMLElement,\n  parentFiber: Fiber | null = null\n) {\n  const attachedListeners: Record<string, EventListener> = {};\n\n  Object.entries(listeners).forEach(([eventType, handler]) => {\n    const listener = attachEventListener(\n      eventType,\n      handler,\n      domElement,\n      parentFiber\n    );\n    attachedListeners[eventType] = listener;\n  });\n\n  return attachedListeners;\n}\n\nfunction removeEventListeners(\n  listeners: Record<string, EventListener> = {},\n  domElement: HTMLElement\n) {\n  Object.entries(listeners).forEach(([eventType, handler]) => {\n    domElement.removeEventListener(eventType, handler);\n  });\n}\n\nexport { attachEventListener, attachEventListeners, removeEventListeners };\n","enum VDOMType {\n  TEXT = Node.TEXT_NODE,\n  ELEMENT = Node.ELEMENT_NODE,\n  FRAGMENT = Node.DOCUMENT_FRAGMENT_NODE,\n}\n\nenum ARRAY_DIFF_OP {\n  ADD = \"add\",\n  REMOVE = \"remove\",\n  MOVE = \"move\",\n  NOOP = \"noop\",\n}\n\ninterface Attributes {\n  [key: string]: unknown; // For general string attributes like id, title, href, etc.\n}\n\ntype Props = Attributes & {\n  on?: Record<string, EventListener>; // Event listeners\n  class?: string | string[]; // CSS classes\n  style?: Record<string, string>; // Inline styles\n};\n\n// Virtual DOM node types\ninterface TextVNode {\n  type: VDOMType.TEXT;\n  value: string;\n  domElement?: Text;\n}\n\ninterface ElementVNode {\n  type: VDOMType.ELEMENT;\n  tag: string;\n  props: Props;\n  children: VNode[];\n  domElement?: HTMLElement;\n  listeners?: Record<string, EventListener>;\n}\n\ninterface FragmentVNode {\n  type: VDOMType.FRAGMENT;\n  children: VNode[];\n  domElement?: HTMLElement; // Parent node for fragment\n}\n\ntype VNode = TextVNode | ElementVNode | FragmentVNode;\ntype VNodeChild = string | VNode; // Acceptable child types\ntype DomElement = Text | HTMLElement;\n\nexport {\n  VDOMType,\n  ARRAY_DIFF_OP,\n  ElementVNode,\n  VNode,\n  VNodeChild,\n  FragmentVNode,\n  Attributes,\n  Props,\n  TextVNode,\n  DomElement,\n};\n","import { removeEventListeners } from \"./events\";\nimport {\n  VDOMType,\n  ElementVNode,\n  FragmentVNode,\n  TextVNode,\n  VNode,\n} from \"./types\";\n\nfunction destroyDOM(vNode: VNode) {\n  const { type } = vNode;\n\n  switch (type) {\n    case VDOMType.TEXT: {\n      removeTextNode(vNode);\n      break;\n    }\n    case VDOMType.ELEMENT: {\n      removeElementNode(vNode);\n      break;\n    }\n    case VDOMType.FRAGMENT: {\n      removeFragmentNodes(vNode);\n      break;\n    }\n\n    default: {\n      throw new Error(\"Cannot destroy DOM of type: \", type);\n    }\n  }\n\n  delete vNode.domElement;\n}\n\nfunction removeTextNode(vNode: TextVNode) {\n  const { domElement } = vNode;\n  if (domElement) {\n    domElement.remove();\n  }\n}\n\nfunction removeElementNode(vNode: ElementVNode) {\n  const { domElement, children, listeners } = vNode;\n\n  if (!domElement) return;\n\n  domElement.remove();\n  children.forEach(destroyDOM);\n\n  if (listeners) {\n    removeEventListeners(listeners, domElement);\n    delete vNode.listeners;\n  }\n}\n\nfunction removeFragmentNodes(vNode: FragmentVNode) {\n  const { children } = vNode;\n  children.forEach(destroyDOM);\n}\n\nexport { destroyDOM };\n","type VoidFunction = (payload?: object) => void;\n\nclass Dispatcher {\n  #subs: Map<string, VoidFunction[]> = new Map();\n  #afterHandlers: VoidFunction[] = [];\n\n  subscribe(commandName: string, handler: VoidFunction) {\n    if (!this.#subs.has(commandName)) {\n      this.#subs.set(commandName, []);\n    }\n\n    const handlers = this.#subs.get(commandName);\n    if (handlers?.includes(handler)) {\n      return () => {};\n    }\n    handlers?.push(handler);\n\n    return () => {\n      if (handlers) {\n        const index = handlers?.indexOf(handler);\n        handlers?.splice(index, 1);\n      }\n    };\n  }\n\n  afterEveryCommand(handler: VoidFunction) {\n    this.#afterHandlers.push(handler);\n    return () => {\n      const index = this.#afterHandlers.indexOf(handler);\n      this.#afterHandlers.splice(index, 1);\n    };\n  }\n\n  dispatch(commandName: string, payload: object) {\n    if (this.#subs.has(commandName)) {\n      this.#subs.get(commandName)?.forEach((handler) => handler(payload));\n    } else {\n      console.warn(`No handlers found for command: ${commandName}`);\n    }\n\n    this.#afterHandlers.forEach((handler) => handler());\n  }\n}\n\nexport { Dispatcher };\n","import { Props } from \"./types\";\n\nfunction setProp(domElement: HTMLElement, attrs: Props) {\n  const { class: className, style, ...restAttrs } = attrs;\n\n  if (typeof className === \"string\" || Array.isArray(className)) {\n    setClass(domElement, className);\n  }\n\n  if (style) {\n    Object.entries(style).forEach(([key, value]) => {\n      if (typeof value === \"string\") {\n        setStyle(domElement, key, value);\n      }\n    });\n  }\n\n  for (const [key, value] of Object.entries(restAttrs)) {\n    if (typeof value === \"string\") {\n      setValueForAttribute(domElement, key, value);\n    }\n  }\n}\n\nfunction setClass(domElement: HTMLElement, className: string | string[]) {\n  domElement.className = \"\";\n\n  if (typeof className === \"string\") {\n    domElement.className = className;\n  }\n\n  if (Array.isArray(className)) {\n    domElement.classList.add(...className);\n  }\n}\n\nfunction setStyle(domElement: HTMLElement, key: string, value: string) {\n  domElement.style[key] = value;\n}\n\nfunction removeStyle(domElement: HTMLElement, key: string) {\n  domElement.style[key] = null;\n}\n\nfunction setValueForAttribute(\n  domElement: HTMLElement,\n  key: string,\n  value: unknown\n) {\n  if (value == null) {\n    removeValueForAttribute(domElement, key);\n  } else if (key.startsWith(\"data-\")) {\n    domElement.setAttribute(key, String(value));\n  } else {\n    domElement[key] = value;\n  }\n}\n\nfunction removeValueForAttribute(domElement: HTMLElement, key: string) {\n  domElement[key] = null;\n  domElement.removeAttribute(key);\n}\n\nexport {\n  setProp,\n  setValueForAttribute,\n  removeValueForAttribute,\n  setStyle,\n  removeStyle,\n};\n","import { attachEventListeners } from \"./events\";\nimport { Fiber } from \"./fiber\";\nimport { setProp } from \"./set-prop\";\nimport {\n  VDOMType,\n  DomElement,\n  ElementVNode,\n  FragmentVNode,\n  Props,\n  TextVNode,\n  VNode,\n} from \"./types\";\n\nfunction mountDOM(\n  vNode: VNode,\n  parentDOMNode: HTMLElement,\n  positionIndex: number | null = null,\n  parentFiber: Fiber | null = null\n) {\n  if (parentDOMNode == undefined) {\n    throw new Error(`\n      \"Parent element is not defined: ${parentDOMNode}`);\n  }\n\n  switch (vNode.type) {\n    case VDOMType.TEXT:\n      createTextInstance(vNode, parentDOMNode, positionIndex);\n      break;\n    case VDOMType.ELEMENT:\n      createInstance(vNode, parentDOMNode, positionIndex, parentFiber);\n      break;\n    case VDOMType.FRAGMENT:\n      createFragmentInstance(vNode, parentDOMNode, positionIndex, parentFiber);\n      break;\n    default:\n      throw new Error(`Unknown vNode type`);\n  }\n}\n\nfunction createTextInstance(\n  vNode: TextVNode,\n  parentDOMNode: HTMLElement,\n  positionIndex: number | null\n) {\n  const { value } = vNode;\n  const domTextNode = document.createTextNode(value);\n  vNode.domElement = domTextNode;\n\n  insertIntoDOM(domTextNode, parentDOMNode, positionIndex);\n}\n\nfunction createFragmentInstance(\n  vNode: FragmentVNode,\n  parentDOMNode: HTMLElement,\n  positionIndex: number | null,\n  parentFiber: Fiber | null = null\n) {\n  const { children } = vNode;\n  vNode.domElement = parentDOMNode;\n\n  children.forEach((child, index) => {\n    mountDOM(\n      child,\n      parentDOMNode,\n      positionIndex ? positionIndex + index : null,\n      parentFiber\n    );\n  });\n}\n\nfunction createInstance(\n  vNode: ElementVNode,\n  parentDOMNode: HTMLElement,\n  positionIndex: number | null,\n  parentFiber: Fiber | null = null\n) {\n  const { tag, props, children } = vNode;\n\n  const domElement = document.createElement(tag);\n  setInitialProperties(domElement, props, vNode, parentFiber);\n  vNode.domElement = domElement;\n\n  children.forEach((child) => {\n    mountDOM(child, domElement, null, parentFiber);\n  });\n\n  return insertIntoDOM(domElement, parentDOMNode, positionIndex);\n}\n\nfunction setInitialProperties(\n  domElement: HTMLElement,\n  props: Props,\n  vNode: ElementVNode,\n  parentFiber: Fiber | null\n) {\n  const { on: events, ...attrs } = props;\n\n  if (events) {\n    vNode.listeners = attachEventListeners(events, domElement, parentFiber);\n  }\n  setProp(domElement, attrs);\n}\n\nfunction insertIntoDOM(\n  domElement: DomElement,\n  parentDOMNode: Node,\n  positionIndex: number | null\n) {\n  if (positionIndex == null) {\n    return parentDOMNode.appendChild(domElement);\n  }\n\n  if (positionIndex < 0) {\n    throw new Error(\n      `Position Index must be positive integer, but got ${positionIndex}`\n    );\n  }\n\n  const children = parentDOMNode.childNodes;\n\n  if (positionIndex >= children.length) {\n    parentDOMNode.appendChild(domElement);\n  } else {\n    parentDOMNode.insertBefore(domElement, children[positionIndex]);\n  }\n}\n\nfunction extractChildren(vNode: VNode) {\n  if (\"children\" in vNode) {\n    const children: VNode[] = [];\n\n    for (const child of vNode.children) {\n      if (child.type === VDOMType.FRAGMENT) {\n        children.push(...extractChildren(child));\n      } else {\n        children.push(child);\n      }\n    }\n\n    return children;\n  }\n  return [];\n}\n\nexport { mountDOM, extractChildren };\n","import { VDOMType, VNode } from \"./types\";\n\nfunction areVNodesEqual(vNodeA: VNode, vNodeB: VNode) {\n  if (\n    vNodeA.type === vNodeB.type &&\n    vNodeA.type === VDOMType.ELEMENT &&\n    vNodeB.type === VDOMType.ELEMENT\n  ) {\n    const { tag: tagA } = vNodeA;\n    const { tag: tagB } = vNodeB;\n\n    return tagA === tagB;\n  }\n\n  return false;\n}\n\nexport { areVNodesEqual };\n","import { ARRAY_DIFF_OP } from \"../types\";\n\nfunction withoutNulls<T>(children: (T | null | undefined)[]): T[] {\n  return children.filter((child) => child != null);\n}\n\nfunction arraysDiff<T>(\n  oldArray: T[],\n  newArray: T[]\n): {\n  added: T[];\n  removed: T[];\n} {\n  return {\n    added: newArray.filter((newArrayItem) => !oldArray.includes(newArrayItem)),\n    removed: oldArray.filter(\n      (oldArrayItem) => !newArray.includes(oldArrayItem)\n    ),\n  };\n}\n\ninterface Operation<T> {\n  op: ARRAY_DIFF_OP;\n  index: number;\n  item: T;\n}\n\ninterface NoopOperation<T> extends Operation<T> {\n  originalIndex: number;\n}\n\ninterface MoveOperation<T> extends Operation<T> {\n  originalIndex: number;\n  from: number;\n}\n\nclass ArrayWithOriginalIndices<T> {\n  #array: T[] = [];\n  #originalIndices: number[] = [];\n  #equalsFn: (a: T, b: T) => boolean;\n\n  constructor(array: T[], equalsFn: (a: T, b: T) => boolean) {\n    this.#array = [...array];\n    this.#originalIndices = array.map((_, index) => index);\n    this.#equalsFn = equalsFn;\n  }\n\n  get length() {\n    return this.#array.length;\n  }\n\n  originalIndexAt(index: number) {\n    return this.#originalIndices[index];\n  }\n\n  findIndexFrom(item: T, fromIndex: number) {\n    for (let index = fromIndex; index < this.length; index++) {\n      if (this.#equalsFn(item, this.#array[index])) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n\n  wasElementRemoved(index: number, newArray: T[]) {\n    if (index >= this.length) {\n      return false;\n    }\n\n    const item = this.#array[index];\n    const indexInNewArray = newArray.findIndex((newItem) =>\n      this.#equalsFn(item, newItem)\n    );\n\n    return indexInNewArray === -1;\n  }\n\n  wasElementTheSame(index: number, newArray: T[]) {\n    if (index >= this.length) {\n      return false;\n    }\n\n    const item = this.#array[index];\n    const newItem = newArray[index];\n\n    return this.#equalsFn(item, newItem);\n  }\n\n  wasElementAdded(item: T, fromIndex: number) {\n    return this.findIndexFrom(item, fromIndex) === -1;\n  }\n\n  removeItemAction(index: number): Operation<T> {\n    const operation: Operation<T> = {\n      op: ARRAY_DIFF_OP.REMOVE,\n      index,\n      item: this.#array[index],\n    };\n\n    this.#array.splice(index, 1);\n    this.#originalIndices.splice(index, 1);\n\n    return operation;\n  }\n\n  noopItemAction(index: number): NoopOperation<T> {\n    return {\n      op: ARRAY_DIFF_OP.NOOP,\n      originalIndex: this.originalIndexAt(index),\n      index,\n      item: this.#array[index],\n    };\n  }\n\n  addItemAction(item: T, index: number): Operation<T> {\n    const operation: Operation<T> = {\n      op: ARRAY_DIFF_OP.ADD,\n      index,\n      item,\n    };\n\n    this.#array.splice(index, 0, item);\n    this.#originalIndices.splice(index, 0, -1);\n\n    return operation;\n  }\n\n  moveItemAction(item: T, toIndex: number): MoveOperation<T> {\n    const fromIndex = this.findIndexFrom(item, toIndex);\n\n    const operation: MoveOperation<T> = {\n      op: ARRAY_DIFF_OP.MOVE,\n      originalIndex: this.originalIndexAt(fromIndex),\n      from: fromIndex,\n      index: toIndex,\n      item: this.#array[fromIndex],\n    };\n\n    const [_item] = this.#array.splice(fromIndex, 1);\n    this.#array.splice(toIndex, 0, _item);\n\n    const [originalIndex] = this.#originalIndices.splice(fromIndex, 1);\n    this.#originalIndices.splice(toIndex, 0, originalIndex);\n\n    return operation;\n  }\n\n  removeRestItems(index: number): Operation<T>[] {\n    const operations: Operation<T>[] = [];\n\n    while (this.length > index) {\n      operations.push(this.removeItemAction(index));\n    }\n\n    return operations;\n  }\n}\n\nfunction arraysDiffSequence<T>(\n  oldArray: T[],\n  newArray: T[],\n  equalsFn: (a: T, b: T) => boolean = (a, b) => a === b\n): Array<Operation<T> | NoopOperation<T> | MoveOperation<T>> {\n  const sequence: Array<Operation<T> | NoopOperation<T> | MoveOperation<T>> =\n    [];\n  const array = new ArrayWithOriginalIndices<T>(oldArray, equalsFn);\n\n  for (let index = 0; index < newArray.length; index++) {\n    if (array.wasElementRemoved(index, newArray)) {\n      sequence.push(array.removeItemAction(index));\n      index--;\n      continue;\n    }\n\n    if (array.wasElementTheSame(index, newArray)) {\n      sequence.push(array.noopItemAction(index));\n      continue;\n    }\n\n    const item = newArray[index];\n\n    if (array.wasElementAdded(item, index)) {\n      sequence.push(array.addItemAction(item, index));\n      continue;\n    }\n\n    sequence.push(array.moveItemAction(item, index));\n  }\n\n  sequence.push(...array.removeRestItems(newArray.length));\n\n  return sequence;\n}\n\nexport { withoutNulls, arraysDiff, arraysDiffSequence };\n","function objectsDiff(\n  oldObject: object,\n  newObject: object\n): {\n  added: string[];\n  removed: string[];\n  updated: string[];\n} {\n  const oldKeys = Object.keys(oldObject);\n  const newKeys = Object.keys(newObject);\n\n  return {\n    added: newKeys.filter((newKey) => !(newKey in oldObject)),\n    removed: oldKeys.filter((oldKey) => !(oldKey in newObject)),\n    updated: newKeys.filter(\n      (newKey) => newKey in oldObject && oldObject[newKey] !== newObject[newKey]\n    ),\n  };\n}\n\nfunction hasOwnProperty(obj: object, prop: string) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport { objectsDiff, hasOwnProperty };\n","function isNotEmptyString(str: string) {\n  return str !== \"\";\n}\n\nfunction isNotBlankOrEmptyString(str: string) {\n  return isNotEmptyString(str.trim());\n}\n\nexport { isNotBlankOrEmptyString };\n","import { destroyDOM } from \"./destroy-dom\";\nimport { attachEventListener } from \"./events\";\nimport { areVNodesEqual } from \"./vnode-equal\";\nimport { extractChildren, mountDOM } from \"./mount-dom\";\nimport {\n  removeStyle,\n  removeValueForAttribute,\n  setStyle,\n  setValueForAttribute,\n} from \"./set-prop\";\nimport {\n  ARRAY_DIFF_OP,\n  Attributes,\n  DomElement,\n  VDOMType,\n  ElementVNode,\n  Props,\n  TextVNode,\n  VNode,\n} from \"./types\";\nimport { arraysDiff, arraysDiffSequence } from \"./utils/arrays\";\nimport { objectsDiff } from \"./utils/objects\";\nimport { isNotBlankOrEmptyString } from \"./utils/strings\";\nimport { Fiber } from \"./fiber\";\n\nfunction patchDOM(\n  oldVNode: VNode,\n  newVNode: VNode,\n  parentDOMNode: HTMLElement,\n  parentFiber: Fiber | null = null\n) {\n  if (!areVNodesEqual(oldVNode, newVNode)) {\n    const positionIndex = oldVNode.domElement\n      ? findIndexInParent(parentDOMNode, oldVNode.domElement)\n      : undefined;\n\n    destroyDOM(oldVNode);\n    mountDOM(newVNode, parentDOMNode, positionIndex, parentFiber);\n\n    return newVNode;\n  }\n\n  newVNode.domElement = oldVNode.domElement;\n\n  switch (newVNode.type) {\n    case VDOMType.TEXT: {\n      if (oldVNode.type === VDOMType.TEXT) {\n        patchText(oldVNode, newVNode);\n      }\n\n      return newVNode;\n    }\n\n    case VDOMType.ELEMENT: {\n      if (oldVNode.type === VDOMType.ELEMENT) {\n        patchElement(oldVNode, newVNode, parentFiber);\n      }\n      break;\n    }\n  }\n\n  patchChildren(oldVNode, newVNode, parentFiber);\n\n  return newVNode;\n}\n\nfunction findIndexInParent(\n  parentDOMNode: Node,\n  domElement: DomElement\n): number | null {\n  const positionIndex = Array.from(parentDOMNode.childNodes).indexOf(\n    domElement\n  );\n\n  if (positionIndex < 0) {\n    return null;\n  }\n\n  return positionIndex;\n}\n\nfunction patchText(oldVNode: TextVNode, newVNode: TextVNode) {\n  if (!oldVNode.domElement) {\n    throw new Error(`Cannot find DOM Element for old vNode: ${oldVNode}`);\n  }\n\n  const domElement: Text = oldVNode.domElement;\n  const { value: oldText } = oldVNode;\n  const { value: newText } = newVNode;\n\n  if (oldText !== newText) {\n    domElement.nodeValue = newText;\n  }\n}\n\nfunction patchElement(\n  oldVNode: ElementVNode,\n  newVNode: ElementVNode,\n  parentFiber: Fiber | null = null\n) {\n  if (!oldVNode.domElement) {\n    throw new Error(`Cannot find DOM Element for old vNode: ${oldVNode}`);\n  }\n\n  const domElement: HTMLElement = oldVNode.domElement;\n  const {\n    class: oldClass,\n    style: oldStyle,\n    on: oldOnEvents,\n    ...oldRestAttributes\n  } = oldVNode.props;\n  const {\n    class: newClass,\n    style: newStyle,\n    on: newOnEvents,\n    ...newRestAttributes\n  } = newVNode.props;\n  const { listeners: oldListeners } = oldVNode;\n\n  patchAttributes(domElement, oldRestAttributes, newRestAttributes);\n  patchClasses(domElement, oldClass, newClass);\n  patchStyles(domElement, oldStyle, newStyle);\n  newVNode.listeners = patchEvents(\n    domElement,\n    oldListeners,\n    oldOnEvents,\n    newOnEvents,\n    parentFiber\n  );\n\n  function patchAttributes(\n    domElement: HTMLElement,\n    oldRestAttributes: Attributes,\n    newRestAttributes: Attributes\n  ) {\n    const { added, removed, updated } = objectsDiff(\n      oldRestAttributes,\n      newRestAttributes\n    );\n\n    for (const key of removed) {\n      removeValueForAttribute(domElement, key);\n    }\n\n    for (const key of added.concat(updated)) {\n      setValueForAttribute(domElement, key, newRestAttributes[key]);\n    }\n  }\n\n  function patchClasses(\n    domElement: HTMLElement,\n    oldClass: Props[\"class\"],\n    newClass: Props[\"class\"]\n  ) {\n    const oldClasses = toClassList(oldClass);\n    const newClasses = toClassList(newClass);\n\n    const { added, removed } = arraysDiff(oldClasses, newClasses);\n\n    if (removed.length > 0) {\n      domElement.classList.remove(...removed);\n    }\n    if (added.length > 0) {\n      domElement.classList.add(...added);\n    }\n\n    function toClassList(classes: Props[\"class\"] = \"\") {\n      return Array.isArray(classes)\n        ? classes.filter(isNotBlankOrEmptyString)\n        : classes.split(/(\\s+)/).filter(isNotBlankOrEmptyString);\n    }\n  }\n\n  function patchStyles(\n    domElement: HTMLElement,\n    oldStyle: Props[\"style\"] = {},\n    newStyle: Props[\"style\"] = {}\n  ) {\n    const { added, removed, updated } = objectsDiff(oldStyle, newStyle);\n\n    for (const key of removed) {\n      removeStyle(domElement, key);\n    }\n\n    for (const key of added.concat(updated)) {\n      setStyle(domElement, key, newStyle[key]);\n    }\n  }\n\n  function patchEvents(\n    domElement: HTMLElement,\n    oldListeners: ElementVNode[\"listeners\"] = {},\n    oldOnEvents: Props[\"on\"] = {},\n    newOnEvents: Props[\"on\"] = {},\n    parentFiber: Fiber | null = null\n  ) {\n    const { added, removed, updated } = objectsDiff(oldOnEvents, newOnEvents);\n\n    for (const eventType of removed.concat(updated)) {\n      domElement.removeEventListener(eventType, oldListeners[eventType]);\n    }\n\n    const addedListeners: ElementVNode[\"listeners\"] = {};\n\n    for (const eventType of added.concat(updated)) {\n      addedListeners[eventType] = attachEventListener(\n        eventType,\n        newOnEvents[eventType],\n        domElement,\n        parentFiber\n      );\n    }\n\n    return addedListeners;\n  }\n}\n\nfunction patchChildren(\n  oldVNode: VNode,\n  newVNode: VNode,\n  parentFiber: Fiber | null = null\n) {\n  if (!oldVNode.domElement) {\n    throw new Error(`Cannot find DOM Element for old vNode: ${oldVNode}`);\n  }\n\n  const oldChildren = extractChildren(oldVNode);\n  const newChildren = extractChildren(newVNode);\n  const parentDomElement = oldVNode.domElement;\n\n  const diffSequence = arraysDiffSequence<VNode>(\n    oldChildren,\n    newChildren,\n    areVNodesEqual\n  );\n\n  for (const operation of diffSequence) {\n    const { index, item, op } = operation;\n    const offset = parentFiber?.offset ?? 0;\n\n    switch (op) {\n      case ARRAY_DIFF_OP.ADD: {\n        if (parentDomElement instanceof HTMLElement) {\n          mountDOM(item, parentDomElement, index + offset, parentFiber);\n        }\n        break;\n      }\n      case ARRAY_DIFF_OP.REMOVE: {\n        destroyDOM(item);\n        break;\n      }\n      case ARRAY_DIFF_OP.MOVE: {\n        if (parentDomElement instanceof HTMLElement) {\n          if (\"originalIndex\" in operation) {\n            const oldChild = oldChildren[operation.originalIndex + offset];\n            const newChild = newChildren[index];\n\n            if (!oldChild.domElement) {\n              throw new Error(\n                `Cannot find DOM Element for old vNode: ${oldVNode}`\n              );\n            }\n\n            const domElement = oldChild.domElement;\n            const domElementAtTargetPosition =\n              parentDomElement.childNodes[index];\n\n            parentDomElement.insertBefore(\n              domElement,\n              domElementAtTargetPosition\n            );\n            patchDOM(oldChild, newChild, parentDomElement, parentFiber);\n          }\n        }\n        break;\n      }\n      case ARRAY_DIFF_OP.NOOP: {\n        if (parentDomElement instanceof HTMLElement) {\n          if (\"originalIndex\" in operation) {\n            patchDOM(\n              oldChildren[operation.originalIndex],\n              newChildren[index],\n              parentDomElement,\n              parentFiber\n            );\n          }\n        }\n        break;\n      }\n    }\n  }\n}\n\nexport { patchDOM };\n","import { destroyDOM } from \"./destroy-dom\";\nimport { Dispatcher } from \"./dispatcher\";\nimport { mountDOM } from \"./mount-dom\";\nimport { patchDOM } from \"./patch-dom\";\nimport { VNode } from \"./types\";\n\nfunction createApp({ state, view, reducers = {} }) {\n  let parentElement: HTMLElement | null = null;\n  let vDOMRootNode: VNode | null = null;\n\n  const dispatcher = new Dispatcher();\n  const subscriptions = [dispatcher.afterEveryCommand(renderApp)];\n\n  function emit(eventType: string, payload: object = {}) {\n    dispatcher.dispatch(eventType, payload);\n  }\n\n  for (const actionName in reducers) {\n    const reducer = reducers[actionName];\n\n    const subs = dispatcher.subscribe(actionName, (payload) => {\n      state = reducer(state, payload);\n    });\n    subscriptions.push(subs);\n  }\n\n  function renderApp() {\n    const nextVDOMRootNode = view(state, emit);\n\n    if (vDOMRootNode && parentElement) {\n      vDOMRootNode = patchDOM(vDOMRootNode, nextVDOMRootNode, parentElement);\n    }\n  }\n\n  return {\n    mount(_parentElement: HTMLElement | null) {\n      parentElement = _parentElement;\n      vDOMRootNode = view(state, emit);\n\n      if (vDOMRootNode && parentElement) {\n        mountDOM(vDOMRootNode, parentElement);\n      }\n    },\n    unmount() {\n      if (vDOMRootNode) {\n        destroyDOM(vDOMRootNode);\n      }\n      vDOMRootNode = null;\n      subscriptions.forEach((unsubscribe) => unsubscribe());\n    },\n  };\n}\n\nexport { createApp };\n","import {\n  VDOMType,\n  ElementVNode,\n  VNode,\n  VNodeChild,\n  Props,\n  TextVNode,\n} from \"./types\";\nimport { withoutNulls } from \"./utils/arrays\";\n\nfunction createElement(\n  tag: string,\n  props: Props = {},\n  children: VNodeChild[] = []\n): ElementVNode {\n  return {\n    type: VDOMType.ELEMENT as const,\n    tag,\n    props,\n    children: mapTextNodes(withoutNulls(children)),\n  };\n}\n\nfunction mapTextNodes(children: VNodeChild[]): VNode[] {\n  return children.map((child) =>\n    typeof child === \"string\" ? createTextElement(child) : child\n  );\n}\n\nfunction createTextElement(text: string): TextVNode {\n  return {\n    type: VDOMType.TEXT as const,\n    value: text,\n  };\n}\n\nexport { createElement };\n"],"names":["attachEventListener","eventType","handler","domElement","parentFiber","boundHandler","event","apply","addEventListener","VDOMType","ARRAY_DIFF_OP","destroyDOM","vNode","type","TEXT","remove","removeTextNode","ELEMENT","children","listeners","forEach","Object","entries","removeEventListener","removeEventListeners","removeElementNode","FRAGMENT","removeFragmentNodes","Error","Node","TEXT_NODE","ELEMENT_NODE","DOCUMENT_FRAGMENT_NODE","Dispatcher","subs","Map","afterHandlers","subscribe","commandName","this","has","set","handlers","get","includes","push","index","indexOf","splice","afterEveryCommand","dispatch","payload","console","warn","setProp","attrs","class","className","style","restAttrs","Array","isArray","classList","add","setClass","key","value","setStyle","setValueForAttribute","removeStyle","removeValueForAttribute","startsWith","setAttribute","String","removeAttribute","mountDOM","parentDOMNode","positionIndex","undefined","domTextNode","document","createTextNode","insertIntoDOM","createTextInstance","tag","props","createElement","on","events","attachedListeners","listener","attachEventListeners","setInitialProperties","child","createInstance","createFragmentInstance","appendChild","childNodes","length","insertBefore","extractChildren","areVNodesEqual","vNodeA","vNodeB","tagA","tagB","withoutNulls","filter","ArrayWithOriginalIndices","array","originalIndices","equalsFn","constructor","map","_","originalIndexAt","findIndexFrom","item","fromIndex","wasElementRemoved","newArray","findIndex","newItem","wasElementTheSame","wasElementAdded","removeItemAction","operation","op","REMOVE","noopItemAction","NOOP","originalIndex","addItemAction","ADD","moveItemAction","toIndex","MOVE","from","_item","removeRestItems","operations","objectsDiff","oldObject","newObject","oldKeys","keys","newKeys","added","newKey","removed","oldKey","updated","isNotBlankOrEmptyString","str","isNotEmptyString","trim","patchDOM","oldVNode","newVNode","findIndexInParent","oldText","newText","nodeValue","patchText","oldClass","oldStyle","oldOnEvents","oldRestAttributes","newClass","newStyle","newOnEvents","newRestAttributes","oldListeners","patchAttributes","concat","patchClasses","oldClasses","toClassList","newClasses","oldArray","newArrayItem","oldArrayItem","classes","split","patchStyles","patchEvents","addedListeners","patchElement","oldChildren","newChildren","parentDomElement","diffSequence","a","b","sequence","arraysDiffSequence","offset","HTMLElement","oldChild","newChild","domElementAtTargetPosition","patchChildren","createApp","state","view","reducers","parentElement","vDOMRootNode","dispatcher","subscriptions","nextVDOMRootNode","emit","actionName","reducer","mount","_parentElement","unmount","unsubscribe","mapTextNodes","text"],"mappings":"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"}