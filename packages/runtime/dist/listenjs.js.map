{"version":3,"file":"listenjs.js","sources":["../src/events.ts","../src/types.ts","../src/destroy-dom.ts","../src/dispatcher.ts","../src/set-prop.ts","../src/mount-host-component.ts","../src/fibers-equal.ts","../src/utils/arrays.ts","../src/utils/object-diff.ts","../src/utils/strings.ts","../src/patch-dom.ts","../src/create-app.ts","../src/create-element.ts"],"sourcesContent":["function attachEventListener(\n  eventType: string,\n  handler: EventListener,\n  domElement: HTMLElement\n) {\n  domElement.addEventListener(eventType, handler);\n\n  return handler;\n}\n\nfunction attachEventListeners(\n  listeners: Record<string, EventListener> = {},\n  domElement: HTMLElement\n) {\n  const attachedListeners: Record<string, EventListener> = {};\n\n  Object.entries(listeners).forEach(([eventType, handler]) => {\n    const listener = attachEventListener(eventType, handler, domElement);\n    attachedListeners[eventType] = listener;\n  });\n\n  return attachedListeners;\n}\n\nfunction removeEventListeners(\n  listeners: Record<string, EventListener> = {},\n  domElement: HTMLElement\n) {\n  Object.entries(listeners).forEach(([eventType, handler]) => {\n    domElement.removeEventListener(eventType, handler);\n  });\n}\n\nexport { attachEventListener, attachEventListeners, removeEventListeners };\n","enum DOMType {\n  TEXT = Node.TEXT_NODE,\n  ELEMENT = Node.ELEMENT_NODE,\n  FRAGMENT = Node.DOCUMENT_FRAGMENT_NODE,\n}\n\nenum ARRAY_DIFF_OP {\n  ADD = \"add\",\n  REMOVE = \"remove\",\n  MOVE = \"move\",\n  NOOP = \"noop\",\n}\n\ninterface Attributes {\n  [key: string]: unknown; // For general string attributes like id, title, href, etc.\n}\n\ntype Props = Attributes & {\n  on?: Record<string, EventListener>; // Event listeners\n  class?: string | string[]; // CSS classes\n  style?: Record<string, string>; // Inline styles\n};\n\n// Fiber node types\ninterface TextFiber {\n  type: DOMType.TEXT;\n  value: string;\n  domElement?: Text;\n}\n\ninterface ElementFiber {\n  type: DOMType.ELEMENT;\n  tag: string;\n  props: Props;\n  children: Fiber[];\n  domElement?: HTMLElement;\n  listeners?: Record<string, EventListener>;\n}\n\ninterface FragmentFiber {\n  type: DOMType.FRAGMENT;\n  children: Fiber[];\n  domElement?: HTMLElement; // Parent node for fragment\n}\n\ntype Fiber = TextFiber | ElementFiber | FragmentFiber;\ntype FiberChild = string | Fiber; // Acceptable child types\ntype DomElement = Text | HTMLElement;\n\nexport {\n  DOMType,\n  ARRAY_DIFF_OP,\n  ElementFiber,\n  Fiber,\n  FiberChild,\n  FragmentFiber,\n  Attributes,\n  Props,\n  TextFiber,\n  DomElement,\n};\n","import { removeEventListeners } from \"./events\";\nimport {\n  DOMType,\n  ElementFiber,\n  Fiber,\n  FragmentFiber,\n  TextFiber,\n} from \"./types\";\n\nfunction destroyDOM(fiber: Fiber) {\n  const { type } = fiber;\n\n  switch (type) {\n    case DOMType.TEXT: {\n      removeTextNode(fiber);\n      break;\n    }\n    case DOMType.ELEMENT: {\n      removeElementNode(fiber);\n      break;\n    }\n    case DOMType.FRAGMENT: {\n      removeFragmentNodes(fiber);\n      break;\n    }\n\n    default: {\n      throw new Error(\"Cannot destroy DOM of type: \", type);\n    }\n  }\n\n  delete fiber.domElement;\n}\n\nfunction removeTextNode(fiber: TextFiber) {\n  const { domElement } = fiber;\n  if (domElement) {\n    domElement.remove();\n  }\n}\n\nfunction removeElementNode(fiber: ElementFiber) {\n  const { domElement, children, listeners } = fiber;\n\n  if (!domElement) return;\n\n  domElement.remove();\n  children.forEach(destroyDOM);\n\n  if (listeners) {\n    removeEventListeners(listeners, domElement);\n    delete fiber.listeners;\n  }\n}\n\nfunction removeFragmentNodes(fiber: FragmentFiber) {\n  const { children } = fiber;\n  children.forEach(destroyDOM);\n}\n\nexport { destroyDOM };\n","type VoidFunction = (payload?: object) => void;\n\nclass Dispatcher {\n  #subs: Map<string, VoidFunction[]> = new Map();\n  #afterHandlers: VoidFunction[] = [];\n\n  subscribe(commandName: string, handler: VoidFunction) {\n    if (!this.#subs.has(commandName)) {\n      this.#subs.set(commandName, []);\n    }\n\n    const handlers = this.#subs.get(commandName);\n    if (handlers?.includes(handler)) {\n      return () => {};\n    }\n    handlers?.push(handler);\n\n    return () => {\n      if (handlers) {\n        const index = handlers?.indexOf(handler);\n        handlers?.splice(index, 1);\n      }\n    };\n  }\n\n  afterEveryCommand(handler: VoidFunction) {\n    this.#afterHandlers.push(handler);\n    return () => {\n      const index = this.#afterHandlers.indexOf(handler);\n      this.#afterHandlers.splice(index, 1);\n    };\n  }\n\n  dispatch(commandName: string, payload: object) {\n    if (this.#subs.has(commandName)) {\n      this.#subs.get(commandName)?.forEach((handler) => handler(payload));\n    } else {\n      console.warn(`No handlers found for command: ${commandName}`);\n    }\n\n    this.#afterHandlers.forEach((handler) => handler());\n  }\n}\n\nexport { Dispatcher };\n","import { Props } from \"./types\";\n\nfunction setProp(domElement: HTMLElement, attrs: Props) {\n  const { class: className, style, ...restAttrs } = attrs;\n\n  if (typeof className === \"string\" || Array.isArray(className)) {\n    setClass(domElement, className);\n  }\n\n  if (style) {\n    Object.entries(style).forEach(([key, value]) => {\n      if (typeof value === \"string\") {\n        setStyle(domElement, key, value);\n      }\n    });\n  }\n\n  for (const [key, value] of Object.entries(restAttrs)) {\n    if (typeof value === \"string\") {\n      setValueForAttribute(domElement, key, value);\n    }\n  }\n}\n\nfunction setClass(domElement: HTMLElement, className: string | string[]) {\n  domElement.className = \"\";\n\n  if (typeof className === \"string\") {\n    domElement.className = className;\n  }\n\n  if (Array.isArray(className)) {\n    domElement.classList.add(...className);\n  }\n}\n\nfunction setStyle(domElement: HTMLElement, key: string, value: string) {\n  domElement.style[key] = value;\n}\n\nfunction removeStyle(domElement: HTMLElement, key: string) {\n  domElement.style[key] = null;\n}\n\nfunction setValueForAttribute(\n  domElement: HTMLElement,\n  key: string,\n  value: unknown\n) {\n  if (value == null) {\n    removeValueForAttribute(domElement, key);\n  } else if (key.startsWith(\"data-\")) {\n    domElement.setAttribute(key, String(value));\n  } else {\n    domElement[key] = value;\n  }\n}\n\nfunction removeValueForAttribute(domElement: HTMLElement, key: string) {\n  domElement[key] = null;\n  domElement.removeAttribute(key);\n}\n\nexport {\n  setProp,\n  setValueForAttribute,\n  removeValueForAttribute,\n  setStyle,\n  removeStyle,\n};\n","import { attachEventListeners } from \"./events\";\nimport { setProp } from \"./set-prop\";\nimport {\n  DOMType,\n  DomElement,\n  ElementFiber,\n  Fiber,\n  FragmentFiber,\n  Props,\n  TextFiber,\n} from \"./types\";\n\nfunction mountHostComponent(\n  fiber: Fiber,\n  parentDOMNode: HTMLElement,\n  positionIndex: number | null = null\n) {\n  if (parentDOMNode == undefined) {\n    throw new Error(`\n      \"Parent element is not defined: ${parentDOMNode}`);\n  }\n\n  switch (fiber.type) {\n    case DOMType.TEXT:\n      createTextInstance(fiber, parentDOMNode, positionIndex);\n      break;\n    case DOMType.ELEMENT:\n      createInstance(fiber, parentDOMNode, positionIndex);\n      break;\n    case DOMType.FRAGMENT:\n      createFragmentInstance(fiber, parentDOMNode, positionIndex);\n      break;\n    default:\n      throw new Error(`Unknown fiber type`);\n  }\n}\n\nfunction createTextInstance(\n  fiber: TextFiber,\n  parentDOMNode: HTMLElement,\n  positionIndex: number | null\n) {\n  const { value } = fiber;\n  const domTextNode = document.createTextNode(value);\n  fiber.domElement = domTextNode;\n\n  insertIntoDOM(domTextNode, parentDOMNode, positionIndex);\n}\n\nfunction createFragmentInstance(\n  fiber: FragmentFiber,\n  parentDOMNode: HTMLElement,\n  positionIndex: number | null\n) {\n  const { children } = fiber;\n  fiber.domElement = parentDOMNode;\n\n  children.forEach((child, index) => {\n    mountHostComponent(\n      child,\n      parentDOMNode,\n      positionIndex ? positionIndex + index : null\n    );\n  });\n}\n\nfunction createInstance(\n  fiber: ElementFiber,\n  parentDOMNode: HTMLElement,\n  positionIndex: number | null\n) {\n  const { tag, props, children } = fiber;\n\n  const domElement = document.createElement(tag);\n  setInitialProperties(domElement, props, fiber);\n  fiber.domElement = domElement;\n\n  children.forEach((child) => {\n    mountHostComponent(child, domElement);\n  });\n\n  return insertIntoDOM(domElement, parentDOMNode, positionIndex);\n}\n\nfunction setInitialProperties(\n  domElement: HTMLElement,\n  props: Props,\n  fiber: ElementFiber\n) {\n  const { on: events, ...attrs } = props;\n\n  if (events) {\n    fiber.listeners = attachEventListeners(events, domElement);\n  }\n  setProp(domElement, attrs);\n}\n\nfunction insertIntoDOM(\n  domElement: DomElement,\n  parentDOMNode: Node,\n  positionIndex: number | null\n) {\n  if (positionIndex == null) {\n    return parentDOMNode.appendChild(domElement);\n  }\n\n  if (positionIndex < 0) {\n    throw new Error(\n      `Position Index must be positive integer, but got ${positionIndex}`\n    );\n  }\n\n  const children = parentDOMNode.childNodes;\n\n  if (positionIndex >= children.length) {\n    parentDOMNode.appendChild(domElement);\n  } else {\n    parentDOMNode.insertBefore(domElement, children[positionIndex]);\n  }\n}\n\nfunction extractChildren(fiber: Fiber) {\n  if (\"children\" in fiber) {\n    const children: Fiber[] = [];\n\n    for (const child of fiber.children) {\n      if (child.type === DOMType.FRAGMENT) {\n        children.push(...extractChildren(child));\n      } else {\n        children.push(child);\n      }\n    }\n\n    return children;\n  }\n  return [];\n}\n\nexport { mountHostComponent, extractChildren };\n","import { DOMType, Fiber } from \"./types\";\n\nfunction areFibersEqual(fiberA: Fiber, fiberB: Fiber) {\n  if (\n    fiberA.type === fiberB.type &&\n    fiberA.type === DOMType.ELEMENT &&\n    fiberB.type === DOMType.ELEMENT\n  ) {\n    const { tag: tagA } = fiberA;\n    const { tag: tagB } = fiberB;\n\n    return tagA === tagB;\n  }\n\n  return false;\n}\n\nexport { areFibersEqual };\n","import { ARRAY_DIFF_OP } from \"../types\";\n\nfunction withoutNulls<T>(children: (T | null | undefined)[]): T[] {\n  return children.filter((child) => child != null);\n}\n\nfunction arraysDiff<T>(\n  oldArray: T[],\n  newArray: T[]\n): {\n  added: T[];\n  removed: T[];\n} {\n  return {\n    added: newArray.filter((newArrayItem) => !oldArray.includes(newArrayItem)),\n    removed: oldArray.filter(\n      (oldArrayItem) => !newArray.includes(oldArrayItem)\n    ),\n  };\n}\n\ninterface Operation<T> {\n  op: ARRAY_DIFF_OP;\n  index: number;\n  item: T;\n}\n\ninterface NoopOperation<T> extends Operation<T> {\n  originalIndex: number;\n}\n\ninterface MoveOperation<T> extends Operation<T> {\n  originalIndex: number;\n  from: number;\n}\n\nclass ArrayWithOriginalIndices<T> {\n  #array: T[] = [];\n  #originalIndices: number[] = [];\n  #equalsFn: (a: T, b: T) => boolean;\n\n  constructor(array: T[], equalsFn: (a: T, b: T) => boolean) {\n    this.#array = [...array];\n    this.#originalIndices = array.map((_, index) => index);\n    this.#equalsFn = equalsFn;\n  }\n\n  get length() {\n    return this.#array.length;\n  }\n\n  originalIndexAt(index: number) {\n    return this.#originalIndices[index];\n  }\n\n  findIndexFrom(item: T, fromIndex: number) {\n    for (let index = fromIndex; index < this.length; index++) {\n      if (this.#equalsFn(item, this.#array[index])) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n\n  wasElementRemoved(index: number, newArray: T[]) {\n    if (index >= this.length) {\n      return false;\n    }\n\n    const item = this.#array[index];\n    const indexInNewArray = newArray.findIndex((newItem) =>\n      this.#equalsFn(item, newItem)\n    );\n\n    return indexInNewArray === -1;\n  }\n\n  wasElementTheSame(index: number, newArray: T[]) {\n    if (index >= this.length) {\n      return false;\n    }\n\n    const item = this.#array[index];\n    const newItem = newArray[index];\n\n    return this.#equalsFn(item, newItem);\n  }\n\n  wasElementAdded(item: T, fromIndex: number) {\n    return this.findIndexFrom(item, fromIndex) === -1;\n  }\n\n  removeItemAction(index: number): Operation<T> {\n    const operation: Operation<T> = {\n      op: ARRAY_DIFF_OP.REMOVE,\n      index,\n      item: this.#array[index],\n    };\n\n    this.#array.splice(index, 1);\n    this.#originalIndices.splice(index, 1);\n\n    return operation;\n  }\n\n  noopItemAction(index: number): NoopOperation<T> {\n    return {\n      op: ARRAY_DIFF_OP.NOOP,\n      originalIndex: this.originalIndexAt(index),\n      index,\n      item: this.#array[index],\n    };\n  }\n\n  addItemAction(item: T, index: number): Operation<T> {\n    const operation: Operation<T> = {\n      op: ARRAY_DIFF_OP.ADD,\n      index,\n      item,\n    };\n\n    this.#array.splice(index, 0, item);\n    this.#originalIndices.splice(index, 0, -1);\n\n    return operation;\n  }\n\n  moveItemAction(item: T, toIndex: number): MoveOperation<T> {\n    const fromIndex = this.findIndexFrom(item, toIndex);\n\n    const operation: MoveOperation<T> = {\n      op: ARRAY_DIFF_OP.MOVE,\n      originalIndex: this.originalIndexAt(fromIndex),\n      from: fromIndex,\n      index: toIndex,\n      item: this.#array[fromIndex],\n    };\n\n    const [_item] = this.#array.splice(fromIndex, 1);\n    this.#array.splice(toIndex, 0, _item);\n\n    const [originalIndex] = this.#originalIndices.splice(fromIndex, 1);\n    this.#originalIndices.splice(toIndex, 0, originalIndex);\n\n    return operation;\n  }\n\n  removeRestItems(index: number): Operation<T>[] {\n    const operations: Operation<T>[] = [];\n\n    while (this.length > index) {\n      operations.push(this.removeItemAction(index));\n    }\n\n    return operations;\n  }\n}\n\nfunction arraysDiffSequence<T>(\n  oldArray: T[],\n  newArray: T[],\n  equalsFn: (a: T, b: T) => boolean = (a, b) => a === b\n): Array<Operation<T> | NoopOperation<T> | MoveOperation<T>> {\n  const sequence: Array<Operation<T> | NoopOperation<T> | MoveOperation<T>> =\n    [];\n  const array = new ArrayWithOriginalIndices<T>(oldArray, equalsFn);\n\n  for (let index = 0; index < newArray.length; index++) {\n    if (array.wasElementRemoved(index, newArray)) {\n      sequence.push(array.removeItemAction(index));\n      index--;\n      continue;\n    }\n\n    if (array.wasElementTheSame(index, newArray)) {\n      sequence.push(array.noopItemAction(index));\n      continue;\n    }\n\n    const item = newArray[index];\n\n    if (array.wasElementAdded(item, index)) {\n      sequence.push(array.addItemAction(item, index));\n      continue;\n    }\n\n    sequence.push(array.moveItemAction(item, index));\n  }\n\n  sequence.push(...array.removeRestItems(newArray.length));\n\n  return sequence;\n}\n\nexport { withoutNulls, arraysDiff, arraysDiffSequence };\n","function objectsDiff(\n  oldObject: object,\n  newObject: object\n): {\n  added: string[];\n  removed: string[];\n  updated: string[];\n} {\n  const oldKeys = Object.keys(oldObject);\n  const newKeys = Object.keys(newObject);\n\n  return {\n    added: newKeys.filter((newKey) => !(newKey in oldObject)),\n    removed: oldKeys.filter((oldKey) => !(oldKey in newObject)),\n    updated: newKeys.filter(\n      (newKey) => newKey in oldObject && oldObject[newKey] !== newObject[newKey]\n    ),\n  };\n}\n\nexport { objectsDiff };\n","function isNotEmptyString(str: string) {\n  return str !== \"\";\n}\n\nfunction isNotBlankOrEmptyString(str: string) {\n  return isNotEmptyString(str.trim());\n}\n\nexport { isNotBlankOrEmptyString };\n","import { destroyDOM } from \"./destroy-dom\";\nimport { attachEventListener } from \"./events\";\nimport { areFibersEqual } from \"./fibers-equal\";\nimport { extractChildren, mountHostComponent } from \"./mount-host-component\";\nimport {\n  removeStyle,\n  removeValueForAttribute,\n  setStyle,\n  setValueForAttribute,\n} from \"./set-prop\";\nimport {\n  ARRAY_DIFF_OP,\n  Attributes,\n  DomElement,\n  DOMType,\n  ElementFiber,\n  Fiber,\n  Props,\n  TextFiber,\n} from \"./types\";\nimport { arraysDiff, arraysDiffSequence } from \"./utils/arrays\";\nimport { objectsDiff } from \"./utils/object-diff\";\nimport { isNotBlankOrEmptyString } from \"./utils/strings\";\n\nfunction patchDOM(\n  oldFiber: Fiber,\n  newFiber: Fiber,\n  parentDOMNode: HTMLElement\n) {\n  console.log(\"Old fiber:\", oldFiber);\n  console.log(\"New fiber:\", newFiber);\n  console.log(\"Are fibers equal?\", areFibersEqual(oldFiber, newFiber));\n\n  if (!areFibersEqual(oldFiber, newFiber)) {\n    console.log(\"Fibers are different - replacing\");\n\n    const positionIndex = oldFiber.domElement\n      ? findIndexInParent(parentDOMNode, oldFiber.domElement)\n      : undefined;\n\n    destroyDOM(oldFiber);\n    mountHostComponent(newFiber, parentDOMNode, positionIndex);\n\n    return newFiber;\n  }\n\n  newFiber.domElement = oldFiber.domElement;\n\n  switch (newFiber.type) {\n    case DOMType.TEXT: {\n      if (oldFiber.type === DOMType.TEXT) {\n        patchText(oldFiber, newFiber);\n      }\n\n      return newFiber;\n    }\n\n    case DOMType.ELEMENT: {\n      if (oldFiber.type === DOMType.ELEMENT) {\n        patchElement(oldFiber, newFiber);\n      }\n      break;\n    }\n  }\n\n  patchChildren(oldFiber, newFiber);\n\n  return newFiber;\n}\n\nfunction findIndexInParent(\n  parentDOMNode: Node,\n  domElement: DomElement\n): number | null {\n  const positionIndex = Array.from(parentDOMNode.childNodes).indexOf(\n    domElement\n  );\n\n  if (positionIndex < 0) {\n    return null;\n  }\n\n  return positionIndex;\n}\n\nfunction patchText(oldFiber: TextFiber, newFiber: TextFiber) {\n  if (!oldFiber.domElement) {\n    throw new Error(`Cannot find DOM Element for old fiber: ${oldFiber}`);\n  }\n\n  const domElement: Text = oldFiber.domElement;\n  const { value: oldText } = oldFiber;\n  const { value: newText } = newFiber;\n\n  if (oldText !== newText) {\n    domElement.nodeValue = newText;\n  }\n}\n\nfunction patchElement(oldFiber: ElementFiber, newFiber: ElementFiber) {\n  if (!oldFiber.domElement) {\n    throw new Error(`Cannot find DOM Element for old fiber: ${oldFiber}`);\n  }\n\n  const domElement: HTMLElement = oldFiber.domElement;\n  const {\n    class: oldClass,\n    style: oldStyle,\n    on: oldOnEvents,\n    ...oldRestAttributes\n  } = oldFiber.props;\n  const {\n    class: newClass,\n    style: newStyle,\n    on: newOnEvents,\n    ...newRestAttributes\n  } = newFiber.props;\n  const { listeners: oldListeners } = oldFiber;\n\n  patchAttributes(domElement, oldRestAttributes, newRestAttributes);\n  patchClasses(domElement, oldClass, newClass);\n  patchStyles(domElement, oldStyle, newStyle);\n  newFiber.listeners = patchEvents(\n    domElement,\n    oldListeners,\n    oldOnEvents,\n    newOnEvents\n  );\n\n  function patchAttributes(\n    domElement: HTMLElement,\n    oldRestAttributes: Attributes,\n    newRestAttributes: Attributes\n  ) {\n    const { added, removed, updated } = objectsDiff(\n      oldRestAttributes,\n      newRestAttributes\n    );\n\n    for (const key of removed) {\n      removeValueForAttribute(domElement, key);\n    }\n\n    for (const key of added.concat(updated)) {\n      setValueForAttribute(domElement, key, newRestAttributes[key]);\n    }\n  }\n\n  function patchClasses(\n    domElement: HTMLElement,\n    oldClass: Props[\"class\"],\n    newClass: Props[\"class\"]\n  ) {\n    const oldClasses = toClassList(oldClass);\n    const newClasses = toClassList(newClass);\n\n    const { added, removed } = arraysDiff(oldClasses, newClasses);\n\n    if (removed.length > 0) {\n      domElement.classList.remove(...removed);\n    }\n    if (added.length > 0) {\n      domElement.classList.add(...added);\n    }\n\n    function toClassList(classes: Props[\"class\"] = \"\") {\n      return Array.isArray(classes)\n        ? classes.filter(isNotBlankOrEmptyString)\n        : classes.split(/(\\s+)/).filter(isNotBlankOrEmptyString);\n    }\n  }\n\n  function patchStyles(\n    domElement: HTMLElement,\n    oldStyle: Props[\"style\"] = {},\n    newStyle: Props[\"style\"] = {}\n  ) {\n    const { added, removed, updated } = objectsDiff(oldStyle, newStyle);\n\n    for (const key of removed) {\n      removeStyle(domElement, key);\n    }\n\n    for (const key of added.concat(updated)) {\n      setStyle(domElement, key, newStyle[key]);\n    }\n  }\n\n  function patchEvents(\n    domElement: HTMLElement,\n    oldListeners: ElementFiber[\"listeners\"] = {},\n    oldOnEvents: Props[\"on\"] = {},\n    newOnEvents: Props[\"on\"] = {}\n  ) {\n    const { added, removed, updated } = objectsDiff(oldOnEvents, newOnEvents);\n\n    for (const eventType of removed.concat(updated)) {\n      domElement.removeEventListener(eventType, oldListeners[eventType]);\n    }\n\n    const addedListeners: ElementFiber[\"listeners\"] = {};\n\n    for (const eventType of added.concat(updated)) {\n      addedListeners[eventType] = attachEventListener(\n        eventType,\n        newOnEvents[eventType],\n        domElement\n      );\n    }\n\n    return addedListeners;\n  }\n}\n\nfunction patchChildren(oldFiber: Fiber, newFiber: Fiber) {\n  if (!oldFiber.domElement) {\n    throw new Error(`Cannot find DOM Element for old fiber: ${oldFiber}`);\n  }\n\n  console.log(\"Patching children...\");\n\n  const oldChildren = extractChildren(oldFiber);\n  const newChildren = extractChildren(newFiber);\n  const parentDomElement = oldFiber.domElement;\n\n  const diffSequence = arraysDiffSequence<Fiber>(\n    oldChildren,\n    newChildren,\n    areFibersEqual\n  );\n\n  console.log(\"Diff sequence:\", diffSequence);\n\n  for (const operation of diffSequence) {\n    const { index, item, op } = operation;\n\n    switch (op) {\n      case ARRAY_DIFF_OP.ADD: {\n        if (parentDomElement instanceof HTMLElement) {\n          mountHostComponent(item, parentDomElement, index);\n        }\n        break;\n      }\n      case ARRAY_DIFF_OP.REMOVE: {\n        destroyDOM(item);\n        break;\n      }\n      case ARRAY_DIFF_OP.MOVE: {\n        if (parentDomElement instanceof HTMLElement) {\n          if (\"originalIndex\" in operation) {\n            const oldChild = oldChildren[operation.originalIndex];\n            const newChild = newChildren[index];\n\n            if (!oldChild.domElement) {\n              throw new Error(\n                `Cannot find DOM Element for old fiber: ${oldFiber}`\n              );\n            }\n\n            const domElement = oldChild.domElement;\n            const domElementAtTargetPosition =\n              parentDomElement.childNodes[index];\n\n            parentDomElement.insertBefore(\n              domElement,\n              domElementAtTargetPosition\n            );\n            patchDOM(oldChild, newChild, parentDomElement);\n          }\n        }\n        break;\n      }\n      case ARRAY_DIFF_OP.NOOP: {\n        if (parentDomElement instanceof HTMLElement) {\n          if (\"originalIndex\" in operation) {\n            patchDOM(\n              oldChildren[operation.originalIndex],\n              newChildren[index],\n              parentDomElement\n            );\n          }\n        }\n        break;\n      }\n    }\n  }\n}\n\nexport { patchDOM };\n","import { destroyDOM } from \"./destroy-dom\";\nimport { Dispatcher } from \"./dispatcher\";\nimport { mountHostComponent } from \"./mount-host-component\";\nimport { patchDOM } from \"./patch-dom\";\nimport { Fiber } from \"./types\";\n\nfunction createApp({ state, view, reducers = {} }) {\n  let parentInstance: HTMLElement | null = null;\n  let fiber: Fiber | null = null;\n\n  const dispatcher = new Dispatcher();\n  const subscriptions = [dispatcher.afterEveryCommand(renderApp)];\n\n  function emit(eventType: string, payload: object = {}) {\n    dispatcher.dispatch(eventType, payload);\n  }\n\n  for (const actionName in reducers) {\n    const reducer = reducers[actionName];\n\n    const subs = dispatcher.subscribe(actionName, (payload) => {\n      state = reducer(state, payload);\n    });\n    subscriptions.push(subs);\n  }\n\n  function renderApp() {\n    const nextFiber = view(state, emit);\n\n    if (fiber && parentInstance) {\n      console.log(\"Patching DOM...\");\n      fiber = patchDOM(fiber, nextFiber, parentInstance);\n    }\n  }\n\n  return {\n    mount(_parentInstance) {\n      parentInstance = _parentInstance;\n      fiber = view(state, emit);\n\n      if (fiber && parentInstance) {\n        mountHostComponent(fiber, parentInstance);\n      }\n    },\n    unmount() {\n      if (fiber) {\n        destroyDOM(fiber);\n      }\n      fiber = null;\n      subscriptions.forEach((unsubscribe) => unsubscribe());\n    },\n  };\n}\n\nexport { createApp };\n","import {\n  DOMType,\n  ElementFiber,\n  Fiber,\n  FiberChild,\n  Props,\n  TextFiber,\n} from \"./types\";\nimport { withoutNulls } from \"./utils/arrays\";\n\nfunction createFiber(\n  tag: string,\n  props: Props = {},\n  children: FiberChild[] = []\n): ElementFiber {\n  return {\n    type: DOMType.ELEMENT as const,\n    tag,\n    props,\n    children: mapTextNodes(withoutNulls(children)),\n  };\n}\n\nfunction mapTextNodes(children: FiberChild[]): Fiber[] {\n  return children.map((child) =>\n    typeof child === \"string\" ? createTextElement(child) : child\n  );\n}\n\nfunction createTextElement(text: string): TextFiber {\n  return {\n    type: DOMType.TEXT as const,\n    value: text,\n  };\n}\n\nexport { createFiber };\n"],"names":["attachEventListener","eventType","handler","domElement","addEventListener","DOMType","ARRAY_DIFF_OP","destroyDOM","fiber","type","TEXT","remove","removeTextNode","ELEMENT","children","listeners","forEach","Object","entries","removeEventListener","removeEventListeners","removeElementNode","FRAGMENT","removeFragmentNodes","Error","Node","TEXT_NODE","ELEMENT_NODE","DOCUMENT_FRAGMENT_NODE","Dispatcher","subs","Map","afterHandlers","subscribe","commandName","this","has","set","handlers","get","includes","push","index","indexOf","splice","afterEveryCommand","dispatch","payload","console","warn","setProp","attrs","class","className","style","restAttrs","Array","isArray","classList","add","setClass","key","value","setStyle","setValueForAttribute","removeStyle","removeValueForAttribute","startsWith","setAttribute","String","removeAttribute","mountHostComponent","parentDOMNode","positionIndex","undefined","domTextNode","document","createTextNode","insertIntoDOM","createTextInstance","tag","props","createElement","on","events","attachedListeners","listener","attachEventListeners","setInitialProperties","child","createInstance","createFragmentInstance","appendChild","childNodes","length","insertBefore","extractChildren","areFibersEqual","fiberA","fiberB","tagA","tagB","withoutNulls","filter","ArrayWithOriginalIndices","array","originalIndices","equalsFn","constructor","map","_","originalIndexAt","findIndexFrom","item","fromIndex","wasElementRemoved","newArray","findIndex","newItem","wasElementTheSame","wasElementAdded","removeItemAction","operation","op","REMOVE","noopItemAction","NOOP","originalIndex","addItemAction","ADD","moveItemAction","toIndex","MOVE","from","_item","removeRestItems","operations","objectsDiff","oldObject","newObject","oldKeys","keys","newKeys","added","newKey","removed","oldKey","updated","isNotBlankOrEmptyString","str","isNotEmptyString","trim","patchDOM","oldFiber","newFiber","log","findIndexInParent","oldText","newText","nodeValue","patchText","oldClass","oldStyle","oldOnEvents","oldRestAttributes","newClass","newStyle","newOnEvents","newRestAttributes","oldListeners","patchAttributes","concat","patchClasses","oldClasses","toClassList","newClasses","oldArray","newArrayItem","oldArrayItem","classes","split","patchStyles","patchEvents","addedListeners","patchElement","oldChildren","newChildren","parentDomElement","diffSequence","a","b","sequence","arraysDiffSequence","HTMLElement","oldChild","newChild","domElementAtTargetPosition","patchChildren","createApp","state","view","reducers","parentInstance","dispatcher","subscriptions","nextFiber","emit","actionName","reducer","mount","_parentInstance","unmount","unsubscribe","createFiber","mapTextNodes","text"],"mappings":"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"}